// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Whiteboards created by this user
  whiteboards   Whiteboard[]
  
  // Collaborations
  collaborations WhiteboardCollaboration[]
  
  // Sessions
  sessions      Session[]
}

model Whiteboard {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     Json?     // Canvas data as JSON
  template    String?   // Template type (mindmap, calendar, etc.)
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Collaborations
  collaborations WhiteboardCollaboration[]
  
  // Comments
  comments    Comment[]
}

model WhiteboardCollaboration {
  id           String    @id @default(cuid())
  role         String    @default("viewer") // viewer, editor, admin
  createdAt    DateTime  @default(now())
  
  // Relationships
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  whiteboardId String
  whiteboard   Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  
  @@unique([userId, whiteboardId])
}

model Comment {
  id           String    @id @default(cuid())
  content      String
  position     Json?     // Position on canvas
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relationships
  whiteboardId String
  whiteboard   Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
